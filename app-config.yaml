app:
  title: Portal Developer Environment
  baseUrl: http://localhost:3000

  # Enable all packages by default, this will discover packages from packages/app/package.json
  packages: all

  extensions:
    # Disable the nav items that we're manually rendering in packages/app/src/modules/nav/Sidebar.tsx
    - nav-item:search: false
    - nav-item:user-settings: false
    - nav-item:catalog: false
    - nav-item:scaffolder: false

    # Configure the catalog index page to be the root page, this is normally mounted on /catalog
    - page:catalog:
        config:
          path: /

organization:
  name: Portal Developer Environment

auth:
  providers:
    # okta:
    #   development:
    #     clientId: ${AUTH_OKTA_CLIENT_ID}
    #     clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
    #     audience: ${AUTH_OKTA_DOMAIN}
    #     ## uncomment to set lifespan of user session
    #     # sessionDuration: { hours: 24 } # Optional: supports `ms` library format (e.g. '24h', '2 days'), ISO duration, "human duration" as used in code
    #     # https://developer.okta.com/docs/reference/api/oidc/#scope-dependent-claims-not-always-returned
    #     additionalScopes: ${AUTH_OKTA_ADDITIONAL_SCOPES} # Optional
    #     signIn:
    #       resolvers:
    #         # See https://backstage.io/docs/auth/okta/provider#resolvers for more resolvers
    #         - resolver: emailMatchingUserEntityProfileEmail
    # github:
    #   development:
    #     clientId: ${AUTH_GITHUB_CLIENT_ID}
    #     clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
    #     ## uncomment if using GitHub Enterprise
    #     # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
    #     ## uncomment to set lifespan of user session
    #     # sessionDuration: { hours: 24 } # supports `ms` library format (e.g. '24h', '2 days'), ISO duration, "human duration" as used in code
    #     signIn:
    #       resolvers:
    #         # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers
    #         - resolver: usernameMatchingUserEntityName

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  reading:
    allow:
      - host: demo.backstage.io
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  # github:
  #   - host: github.com
  #     apps:
  #       - appId: ${AUTH_ORG_APP_ID}
  #         clientId: ${AUTH_ORG_CLIENT_ID}
  #         clientSecret: ${AUTH_ORG_CLIENT_SECRET}
  #         privateKey: ${AUTH_ORG1_PRIVATE_KEY}
  #         webhookSecret: ${AUTH_ORG_WEBHOOK_SECRET} # webhookSecret is optional, not required if not using GH events

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template, User, Group]
  providers:
    # ingest user and group data from your Github organization
    githubOrg:
      - id: github
        githubUrl: # inserts your base url e.g. https://company.ghe.com
        orgs: # insert your org e.g. ['backstage-team']
        schedule:
          initialDelay: { seconds: 15 }
          frequency: { hours: 1 }
          timeout: { minutes: 10 }
    # use discovery to ingest software component data from your Github organization
    github:
      githubComponentProvider:
        organization: # insert your org e.g. 'backstage-portal-demo'
        host: # insert your host url e.g. company.ghe.com
        schedule:
          initialDelay: { seconds: 120 }
          frequency: { hours: 1 }
          timeout: { minutes: 10 }
  locations:
    # Local example okta organizational data
    # - type: file
    #   target: ../../examples/okta-org.yaml
    #   rules:
    #     - allow: [User, Group]

    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    # - type: file
    #   target: ../../examples/entities.yaml

    # Local example template
    # - type: file
    #   target: ../../examples/template/template.yaml
    #   rules:
    #     - allow: [Template]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
